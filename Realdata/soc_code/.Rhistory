simul_n = 100L
train_n = 200L
valid_n = 200L
test_n = 1000L
input_dim = 1L
input_fake_dim = 100L - input_dim
# data generating
sim_data_list = vector('list', simul_n)
for(j in 1:simul_n)
{
set.seed(j)
x = matrix(runif( train_n * input_dim, -1, 1), train_n, input_dim)
sincx = sin(pi * x) / (pi * x)
Z = matrix(sincx, nrow = train_n, ncol = input_dim)
ep = rnorm(train_n, mean = 0, sd = 0.1 * exp(1 - x)) ## example 1
y = Z + ep
x = cbind(x, matrix(runif(train_n * input_fake_dim, -1, 1), train_n))
x_valid = matrix(runif( valid_n * input_dim, -1, 1), valid_n, input_dim)
sincx_valid = sin(pi * x_valid) / (pi * x_valid)
Z_valid = matrix(sincx_valid, nrow = valid_n, ncol = input_dim)
ep_valid = rnorm(valid_n, mean = 0, sd = 0.1 * exp(1 - x_valid))
y_valid = Z_valid + ep_valid
x_valid = cbind(x_valid, matrix(runif(valid_n * input_fake_dim, -1, 1), valid_n))
x_test = matrix(runif( test_n * input_dim, -1, 1), test_n, input_dim)
sincx_test = sin(pi * x_test) / (pi * x_test)
Z_test = matrix(sincx_test, nrow = test_n, ncol = input_dim)
ep_test = rnorm(test_n, mean = 0, sd = 0.1 * exp(1 - x_test))
y_test = Z_test + ep_test
x_test = cbind(x_test, matrix(runif(test_n * input_fake_dim, -1, 1), test_n))
tmp_data_list = list(x = x, y = y,
x_valid = x_valid, y_valid = y_valid,
x_test = x_test, y_test = y_test)
sim_data_list[[j]] = tmp_data_list
}
tau_vec = c(0.1, 0.25, 0.5, 0.75, 0.9)
### l1
j = 1
tau_vec = c(0.1, 0.25, 0.5, 0.75, 0.9)
time_vec = numeric(simul_n)
x = sim_data_list[[j]]$x
y = sim_data_list[[j]]$y
x_valid = sim_data_list[[j]]$x_valid
y_valid = sim_data_list[[j]]$y_valid
x_test = sim_data_list[[j]]$x_test
y_test = sim_data_list[[j]]$y_test
tmp_l1_fit = l1_p(X = x,
y = y,
test_X = x_test,
valid_X = x_valid,
tau = tau_vec,
hidden_dim1 = 4,
hidden_dim2 = 4,
learning_rate = 0.005,
max_deep_iter = 1,
lambda_obj = 0,
penalty = 0)
tmp_l1_fit
##### enviroment setting ####
rm(list = ls())
gc(reset = T)
require(qrnn)
require(dplyr)
require(tensorflow)
require(l1pm)
simul_n = 100L
train_n = 10000L
valid_n = 100L
test_n = 1000L
input_dim = 1L
input_fake_dim = 100L - input_dim
# data generating
sim_data_list = vector('list', simul_n)
for(j in 1:simul_n)
{
set.seed(j)
x = matrix(runif( train_n * input_dim, -1, 1), train_n, input_dim)
sincx = sin(pi * x) / (pi * x)
Z = matrix(sincx, nrow = train_n, ncol = input_dim)
ep = rnorm(train_n, mean = 0, sd = 0.1 * exp(1 - x)) ## example 1
y = Z + ep
x = cbind(x, matrix(runif(train_n * input_fake_dim, -1, 1), train_n))
x_valid = matrix(runif( valid_n * input_dim, -1, 1), valid_n, input_dim)
sincx_valid = sin(pi * x_valid) / (pi * x_valid)
Z_valid = matrix(sincx_valid, nrow = valid_n, ncol = input_dim)
ep_valid = rnorm(valid_n, mean = 0, sd = 0.1 * exp(1 - x_valid))
y_valid = Z_valid + ep_valid
x_valid = cbind(x_valid, matrix(runif(valid_n * input_fake_dim, -1, 1), valid_n))
x_test = matrix(runif( test_n * input_dim, -1, 1), test_n, input_dim)
sincx_test = sin(pi * x_test) / (pi * x_test)
Z_test = matrix(sincx_test, nrow = test_n, ncol = input_dim)
ep_test = rnorm(test_n, mean = 0, sd = 0.1 * exp(1 - x_test))
y_test = Z_test + ep_test
x_test = cbind(x_test, matrix(runif(test_n * input_fake_dim, -1, 1), test_n))
tmp_data_list = list(x = x, y = y,
x_valid = x_valid, y_valid = y_valid,
x_test = x_test, y_test = y_test)
sim_data_list[[j]] = tmp_data_list
}
tmp_l1_fit = l1_p(X = x,
y = y,
test_X = x_test,
valid_X = x_valid,
tau = tau_vec,
hidden_dim1 = 4,
hidden_dim2 = 4,
learning_rate = 0.005,
max_deep_iter = 1,
lambda_obj = 0,
penalty = 0)
### l1
tau_vec = c(0.1, 0.25, 0.5, 0.75, 0.9)
time_vec = numeric(simul_n)
dim(x)
tau_vec = c(0.1, 0.25, 0.5, 0.75, 0.9)
time_vec = numeric(simul_n)
for(j in 1:simul_n)
{
x = sim_data_list[[j]]$x
y = sim_data_list[[j]]$y
x_valid = sim_data_list[[j]]$x_valid
y_valid = sim_data_list[[j]]$y_valid
x_test = sim_data_list[[j]]$x_test
y_test = sim_data_list[[j]]$y_test
l1_start = Sys.time()
tmp_l1_fit = l1_p(X = x,
y = y,
test_X = x_test,
valid_X = x_valid,
tau = tau_vec,
hidden_dim1 = 4,
hidden_dim2 = 4,
learning_rate = 0.005,
max_deep_iter = 1,
lambda_obj = 0,
penalty = 0)
l1_end = Sys.time()
time_vec[j] = as.numeric(difftime(l1_end, l1_start, units = 'secs'))
cat(j, '\n')
}
time_vec
hist(time_vec)
mcqrnn_time = numeric(simul_n)
for(j in 1L:simul_n)
{
set.seed(j)
x = sim_data_list[[j]]$x
y = sim_data_list[[j]]$y
x_valid = sim_data_list[[j]]$x_valid
y_valid = sim_data_list[[j]]$y_valid
x_test = sim_data_list[[j]]$x_test
y_test = sim_data_list[[j]]$y_test
mcqrnn_start = Sys.time()
tmp_mcqrnn_fit = mcqrnn.fit(x, y, n.hidden = 4, n.hidden2 = 4,
tau = tau_vec, iter.max = 1, penalty = 0)
mcqrnn_end = Sys.time()
mcqrnn_time[j] = as.numeric(difftime(mcqrnn_end, mcqrnn_start, units = 'secs'))
cat(j, '\n')
}
mcqrnn_time
boxplot(mcqrnn_time)
boxplot(cbind(time_vec, mcqrnn_time))
time_data = data.frame('l1p' = time_vec, 'mcqrnn' = mcqrnn_time)
head(time_data)
reshape2::melt(time_data)
reshape2::melt(time_data) %>%
dplyr::group_by(variable) %>% dplyr::summarise(m = mean(value), sd = sd(value))
reshape2::melt(time_data[1:50,]) %>%
dplyr::group_by(variable) %>% dplyr::summarise(m = mean(value), sd = sd(value))
reshape2::melt(time_data[1:50,]) %>%
dplyr::group_by(variable) %>% dplyr::summarise(m = mean(value), sd = sd(value)) %>%
xtable::xtable()
require(httr)
url_post = POST('http://www.wamis.go.kr/wkw/we_dtdata_list.do')
url_post$status_code
url = 'http://www.wamis.go.kr/wkw/we_dtdata_list.do'
source('~/.active-rstudio-document', echo=TRUE)
require(rvest)
url = 'http://www.wamis.go.kr/wkw/we_dtdata_list.do'
url_post = POST(url)
read_html(url_post)
url_post = POST(url, body = list(code = '30111131',
date1 = '20210115'
date2= '20210214'))
url_post = POST(url, body = list(code = '30111131',
date1 = '20210115',
date2= '20210214'))
url_post$status_code
read_html(url_post)
require(jsonlite)
jsonlite::fromJSON(url_post)
jsonlite::fromJSON(read_html(url_post))
jsonlite::fromJSON(read_html(url_post) %>% html_nodes('p') %>% html_text())
a = jsonlite::fromJSON(read_html(url_post) %>% html_nodes('p') %>% html_text())
a[1, ]
a[[1]][1, ]
which(a[[1]][1, ] == 4.9)
df = jsonlite::fromJSON(read_html(url_post) %>% html_nodes('p') %>% html_text())[[1]]
df
if(!require(httr)) install.packages('httr'); require(httr)
if(!require(rvest)) install.packages('rvest'); require(rvest)
if(!require(jsonlite)) install.packages('jsonlite'); require(jsonlite)
url_post = POST(url, body = list(code = '30111131',
date1 = '20210110',
date2= '20210214'))
df = jsonlite::fromJSON(read_html(url_post) %>% html_nodes('p') %>% html_text())[[1]]
df
tail(df)
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/real_data/soc_code')
if(!require(BradleyTerry2)) install.packages('BradleyTerry2'); require(BradleyTerry2)
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
#### soc mtdot ####
readLines('../soc/ED-00024-00000004.soc', n = 6)
mtdot_data = read.table('../soc/ED-00024-00000004.soc', skip = 6, sep = ',')
head(mtdot_data)
mtdot_data_list = lapply(1:nrow(mtdot_data), function(i)
mtdot_data[rep(i, mtdot_data[i, 1]), -1])
mtdot_data = mtdot_data_list %>% do.call('rbind', .) %>% as.matrix()
rownames(mtdot_data) = colnames(mtdot_data) = NULL
head(mtdot_data)
apply(mtdot_data, 1, paste0)
apply(mtdot_data, 1, paste0, collapse = '')
table(apply(mtdot_data, 1, paste0, collapse = ''))
plot(table(apply(mtdot_data, 1, paste0, collapse = '')))
hist(table(apply(mtdot_data, 1, paste0, collapse = '')))
barplot(table(apply(mtdot_data, 1, paste0, collapse = '')))
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/real_data/soc_code')
require(BradleyTerry2)
require(dplyr)
#### soc mtpuz ####
source('..//model.R')
readLines('../soc/ED-00025-00000004.soc', n = 6)
mtpuz_data = read.table('../soc/ED-00025-00000004.soc', skip = 6, sep = ',')
head(mtpuz_data)
mtpuz_data_list = lapply(1:nrow(mtpuz_data), function(i)
mtpuz_data[rep(i, mtpuz_data[i, 1]), -1])
mtpuz_data = mtpuz_data_list %>% do.call('rbind', .) %>% as.matrix()
rownames(mtpuz_data) = colnames(mtpuz_data) = NULL
head(mtpuz_data)
barplot(table(apply(mtdot_data, 1, paste0, collapse = '')))
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/real_data/soc_code')
require(BradleyTerry2)
require(dplyr)
#### soc mtpuz ####
source('..//model.R')
readLines('../soc/ED-00025-00000004.soc', n = 6)
mtpuz_data = read.table('../soc/ED-00025-00000004.soc', skip = 6, sep = ',')
head(mtpuz_data)
mtpuz_data_list = lapply(1:nrow(mtpuz_data), function(i)
mtpuz_data[rep(i, mtpuz_data[i, 1]), -1])
mtpuz_data = mtpuz_data_list %>% do.call('rbind', .) %>% as.matrix()
rownames(mtpuz_data) = colnames(mtpuz_data) = NULL
head(mtpuz_data)
barplot(table(apply(mtpuz_data, 1, paste0, collapse = '')))
mtpuz_data = read.table('../soc/ED-00025-00000004.soc', skip = 6, sep = ',')
mtpuz_data
readLines
readLines('../soc/ED-00025-00000004.soc', n = 6)
mtpuz_data = read.table('../soc/ED-00025-00000004.soc', skip = 6, sep = ',')
head(mtpuz_data)
mtpuz_data_list = lapply(1:nrow(mtpuz_data), function(i)
mtpuz_data[rep(i, mtpuz_data[i, 1]), -1])
mtpuz_data = mtpuz_data_list %>% do.call('rbind', .) %>% as.matrix()
rownames(mtpuz_data) = colnames(mtpuz_data) = NULL
head(mtpuz_data)
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/real_data/soc_code')
if(!require(BradleyTerry2)) install.packages('BradleyTerry2'); require(BradleyTerry2)
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
#### soc mtdot ####
readLines('../soc/ED-00024-00000004.soc', n = 6)
mtdot_data = read.table('../soc/ED-00024-00000004.soc', skip = 6, sep = ',')
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/real_data/soc_code')
if(!require(BradleyTerry2)) install.packages('BradleyTerry2'); require(BradleyTerry2)
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
#### soc mtdot ####
readLines('../soc/ED-00024-00000004.soc', n = 6)
mtdot_data = read.table('../soc/ED-00024-00000004.soc', skip = 6, sep = ',')
head(mtdot_data)
mtdot_data_list = lapply(1:nrow(mtdot_data), function(i)
mtdot_data[rep(i, mtdot_data[i, 1]), -1])
mtdot_data = mtdot_data_list %>% do.call('rbind', .) %>% as.matrix()
rownames(mtdot_data) = colnames(mtdot_data) = NULL
head(mtdot_data)
barplot(table(apply(mtdot_data, 1, paste0, collapse = '')))
#### configure ####
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/real_data/soc_code')
source('..//model.R')
load('r1_data_list.Rdata')
load('r1_model_list.Rdata')
load('r1_btm_list.Rdata')
load('r1_bt_list.Rdata')
n_items = ncol(data_list[[1]]$train)
n_items_comb = n_items * (n_items - 1) / 2
permu_items = permutations(n_items)
all_data = x_data_generates(permu_items)
A_mat = A_mat_fun(n_items)
train_g = x_data_generates(data_list[[i]]$train)
i = 1
train_g = x_data_generates(data_list[[i]]$train)
train_g
train_g_p = apply(train_g, 1, paste0, collapse = '')
train_order = order(train_g_p)
train_order
train_g_p_df = data.frame(table(train_g_p))
train_g_p_df$prop = train_g_p_df$Freq / sum(train_g_p_df$Freq)
train_g_p_df
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
j = 1
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(train_g_p = apply(all_data, 1, paste0, collapse = ''), prob_est)
prob_est_data
n_items = ncol(data_list[[1]]$train)
n_items_comb = n_items * (n_items - 1) / 2
permu_items = permutations(n_items)
all_data = x_data_generates(permu_items)
A_mat = A_mat_fun(n_items)
all_data
permu_items
apply(permu_items, 1, paste0, collapse = '')
i = j = 1
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est
barplot(table(apply(mtdot_data, 1, paste0, collapse = '')))
barplot(table(apply(mtdot_data, 1, paste0, collapse = '')))
readLines('../soc/ED-00024-00000004.soc', n = 6)
mtdot_data = read.table('../soc/ED-00024-00000004.soc', skip = 6, sep = ',')
head(mtdot_data)
mtdot_data_list = lapply(1:nrow(mtdot_data), function(i)
mtdot_data[rep(i, mtdot_data[i, 1]), -1])
mtdot_data = mtdot_data_list %>% do.call('rbind', .) %>% as.matrix()
rownames(mtdot_data) = colnames(mtdot_data) = NULL
head(mtdot_data)
barplot(table(apply(mtdot_data, 1, paste0, collapse = '')))
mtdot_data
#### soc mtdot ####
readLines('../soc/ED-00024-00000004.soc', n = 6)
mtdot_data = read.table('../soc/ED-00024-00000004.soc', skip = 6, sep = ',')
mtdot_data
n_items = ncol(data_list[[1]]$train)
n_items_comb = n_items * (n_items - 1) / 2
permu_items = permutations(n_items)
all_data = x_data_generates(permu_items)
apply(permu_items, 1, paste0, collapse = '')
i = j = 1
all_data
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(train_g_p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
prob_est_data
mtdot_data
mtdot_data[, -1]
apply(mtdot_data[, -1], 1, paste0, collapse = '')
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
data.frame(ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]), p = apply(mtdot_data[, -1], 1, paste0, collapse = ''))
tmp = data.frame(ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]), p = apply(mtdot_data[, -1], 1, paste0, collapse = ''))
prob_est_data
tmp
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
merge(prob_est_data, tmp, by = 'p')
tt = merge(prob_est_data, tmp, by = 'p')
plot(tt[, 1:2])
tt[, 1:2]
plot(tt[, 2:3])
plot(tt[, 1:2], type = 's')
points(tt[, c(1, 3)], type = 's', col = 'red')
plot(tt[, 1:2], type = 's')
tt[, 2]
tt[, 3]
plot(tt[, c(1, 3)], type = 's', col = 'red')
plot(tt[, 1:2], type = 's')
plot(tt[, c(1, 3)], type = 's', col = 'red')
plot(tt[, 1:2], type = 's')
i = j = 5
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
plot(tt[, c(1, 3)], type = 's', col = 'red')
plot(tt[, 1:2], type = 's')
head(tt)
plot(tt$p, tt$ratio, type = 's', col = 'red')
plot(tt$p, tt$ratio, col = 'red')
points(tt$p, tt$prob_est, type = 's')
points(tt$p, tt$prob_est)
plot(tt$p, tt$ratio, col = 'red')
tt$p
require(ggplot2)
ggplot(tt) +
geom_point(aes(x = p, y = ratio))
ggplot(tt) +
geom_point(aes(x = p, y = ratio)) +
geom_point(aes(x = p, y = prob_est))
tt
reshape2::melt(tt)
ggplot(reshape2::melt(tt)) +
geom_point(aes(x = p, y = value, group = variable))
ggplot(reshape2::melt(tt)) +
geom_point(aes(x = p, y = value, col = variable))
i = j = 1
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
require(ggplot2)
reshape2::melt(tt)
ggplot(reshape2::melt(tt)) +
geom_point(aes(x = p, y = value, col = variable))
i = 1
j = 2
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
require(ggplot2)
reshape2::melt(tt)
ggplot(reshape2::melt(tt)) +
geom_point(aes(x = p, y = value, col = variable))
i = 1
j = 3
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
require(ggplot2)
reshape2::melt(tt)
ggplot(reshape2::melt(tt)) +
geom_point(aes(x = p, y = value, col = variable))
i = 1
j = 4
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
require(ggplot2)
reshape2::melt(tt)
ggplot(reshape2::melt(tt)) +
geom_point(aes(x = p, y = value, col = variable))
i = 2
j = 2
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
require(ggplot2)
reshape2::melt(tt)
ggplot(reshape2::melt(tt)) +
geom_point(aes(x = p, y = value, col = variable))
tt$prob_est - tt$ratio
sum(abs(tt$prob_est - tt$ratio))
vis_mat = matrix(0, nrow = length(model_list), ncol = 5)
vis_mat = matrix(0, nrow = length(model_list), ncol = 5)
for(i in 1:length(model_list))
{
for(j in 1:5)
{
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
model[i, j] = sum(abs(tt$prob_est - tt$ratio))
}
}
vis_mat = matrix(0, nrow = length(model_list), ncol = 5)
for(i in 1:length(model_list))
{
for(j in 1:5)
{
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
vis_mat[i, j] = sum(abs(tt$prob_est - tt$ratio))
}
}
which.min(vis_mat)
min(vis_mat)
vis_mat == min(vis_mat)
i = 58
j = 1
i = 58
j = 1
prob_est = exp(all_data %*% model_list[[i]][[j]]$theta_hat) /
sum(exp(all_data %*% model_list[[i]][[j]]$theta_hat))
prob_est_data = data.frame(p = apply(permu_items, 1, paste0, collapse = ''), prob_est)
tmp = data.frame(p = apply(mtdot_data[, -1], 1, paste0, collapse = ''), ratio = mtdot_data[, 1]/sum(mtdot_data[, 1]))
tt = merge(prob_est_data, tmp, by = 'p')
require(ggplot2)
reshape2::melt(tt)
ggplot(reshape2::melt(tt)) +
geom_point(aes(x = p, y = value, col = variable))
