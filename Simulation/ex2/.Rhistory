setwd('ex2')
load('ex2_data_list_500.Rdata')
lambda_candidate = seq(0, 0.2, 0.05)
i = j = 1
system.time(tmp_fit <- cbs_fit(x = x_data_list[[1]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4))
system.time(tmp_fit_CD_1 <- cbs_fit_CD(x = x_data_list[[1]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 1,
eps = 1e-4))
system.time(tmp_fit_CD_3 <- cbs_fit_CD(x = x_data_list[[1]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 3,
eps = 1e-4))
system.time(tmp_fit_CD_1 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 1,
eps = 1e-4))
system.time(tmp_fit_CD_3 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 3,
eps = 1e-4))
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
setwd('ex2')
load('ex2_data_list_500.Rdata')
lambda_candidate = seq(0, 0.2, 0.05)
i = j = 1
system.time(tmp_fit <- cbs_fit(x = x_data_list[[1]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4))
system.time(tmp_fit_CD_1 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 1,
eps = 1e-4))
system.time(tmp_fit_CD_3 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 3,
eps = 1e-4))
test_rank_data = permutations(5)
test_data = x_data_generates(data = test_rank_data)
A_mat = A_mat_fun(n_items = 5) ## design matrix
# ex 2
gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
gamma_ratio = 1
beta_star = c(-1, -0.8, 0.5, 0.7, 0.6, gamma_star * gamma_ratio)
n_items_comb = 10
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
par(mfrow = c(2, 2))
y_max = max(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)),
exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)),
exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)),
# exp(test_data %*% tmp_fit_CD_5$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_5$theta_hat)),
# exp(test_data %*% tmp_fit_CD_10$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_10$theta_hat)),
exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)))
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), type = 's', main = 'True')
plot(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)), type = 's', ylim = c(0, y_max), main = 'Proposed')
plot(exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_1')
plot(exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_3')
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
cbs_fit_CD
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
setwd('ex2')
load('ex2_data_list_500.Rdata')
lambda_candidate = seq(0, 0.2, 0.05)
i = j = 1
system.time(tmp_fit <- cbs_fit(x = x_data_list[[1]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4))
system.time(tmp_fit_CD_1 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 1,
eps = 1e-4))
system.time(tmp_fit_CD_3 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 3,
eps = 1e-4))
test_rank_data = permutations(5)
test_data = x_data_generates(data = test_rank_data)
A_mat = A_mat_fun(n_items = 5) ## design matrix
gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
gamma_ratio = 1
beta_star = c(-1, -0.8, 0.5, 0.7, 0.6, gamma_star * gamma_ratio)
n_items_comb = 10
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
par(mfrow = c(2, 2))
y_max = max(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)),
exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)),
exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)),
# exp(test_data %*% tmp_fit_CD_5$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_5$theta_hat)),
# exp(test_data %*% tmp_fit_CD_10$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_10$theta_hat)),
exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)))
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), type = 's', main = 'True')
plot(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)), type = 's', ylim = c(0, y_max), main = 'Proposed')
plot(exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_1')
plot(exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_3')
gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
gamma_ratio = 1
beta_star = c(-1, -0.8, 0.5, 0.7, 0.6, gamma_star * gamma_ratio)
# ex 5
# gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
# gamma_ratio = 5
# beta_star = c(0.1, 0.2, 0, -0.05, -0.25, gamma_star * gamma_ratio)
n_items_comb = 10
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
par(mfrow = c(2, 2))
y_max = max(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)),
exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)),
exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)),
# exp(test_data %*% tmp_fit_CD_5$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_5$theta_hat)),
# exp(test_data %*% tmp_fit_CD_10$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_10$theta_hat)),
exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)))
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), type = 's', main = 'True')
plot(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)), type = 's', ylim = c(0, y_max), main = 'Proposed')
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
setwd('ex2')
load('ex2_data_list_500.Rdata')
lambda_candidate = seq(0, 0.2, 0.05)
i = j = 1
system.time(tmp_fit <- cbs_fit(x = x_data_list[[1]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4))
system.time(tmp_fit_CD_1 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 1,
eps = 1e-4))
system.time(tmp_fit_CD_3 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 3,
eps = 1e-4))
n_items_comb = 10
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
par(mfrow = c(2, 2))
y_max = max(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)),
exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)),
exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)),
# exp(test_data %*% tmp_fit_CD_5$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_5$theta_hat)),
# exp(test_data %*% tmp_fit_CD_10$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_10$theta_hat)),
exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)))
test_rank_data = permutations(5)
test_data = x_data_generates(data = test_rank_data)
A_mat = A_mat_fun(n_items = 5) ## design matrix
gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
gamma_ratio = 1
beta_star = c(-1, -0.8, 0.5, 0.7, 0.6, gamma_star * gamma_ratio)
n_items_comb = 10
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
par(mfrow = c(2, 2))
y_max = max(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)),
exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)),
exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)),
# exp(test_data %*% tmp_fit_CD_5$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_5$theta_hat)),
# exp(test_data %*% tmp_fit_CD_10$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_10$theta_hat)),
exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)))
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), type = 's', main = 'True')
plot(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)), type = 's', ylim = c(0, y_max), main = 'Proposed')
plot(exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_1')
y_max
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), ylim = c(0, y_max), type = 's', main = 'True')
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), ylim = c(0, y_max), type = 's', main = 'True')
plot(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)), type = 's', ylim = c(0, y_max), main = 'Proposed')
plot(exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_1')
plot(exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_3')
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
setwd('ex2')
load('ex2_data_list_500.Rdata')
lambda_candidate = seq(0, 0.2, 0.05)
i = j = 1
system.time(tmp_fit <- cbs_fit(x = x_data_list[[1]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4))
system.time(tmp_fit_CD_1 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 1,
eps = 1e-4))
system.time(tmp_fit_CD_3 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 3,
eps = 1e-4))
test_rank_data = permutations(5)
test_data = x_data_generates(data = test_rank_data)
A_mat = A_mat_fun(n_items = 5) ## design matrix
# ex 1
# gamma_star = c(0, -0.2, 0, 0, 0.2, 0, 0, 0, 0, 0)
# gamma_ratio = 1
# beta_star = c(0.7, 0.5, 0, -0.4, -0.8, gamma_star * gamma_ratio)
# ex 2
gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
gamma_ratio = 1
beta_star = c(-1, -0.8, 0.5, 0.7, 0.6, gamma_star * gamma_ratio)
# ex 5
# gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
# gamma_ratio = 5
# beta_star = c(0.1, 0.2, 0, -0.05, -0.25, gamma_star * gamma_ratio)
n_items_comb = 10
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
par(mfrow = c(2, 2))
y_max = max(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)),
exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)),
exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)),
# exp(test_data %*% tmp_fit_CD_5$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_5$theta_hat)),
# exp(test_data %*% tmp_fit_CD_10$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_10$theta_hat)),
exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)))
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), ylim = c(0, y_max), type = 's', main = 'True')
plot(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)), type = 's', ylim = c(0, y_max), main = 'Proposed')
plot(exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_1')
plot(exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_3')
tmp_fit_CD_1$theta_hat
tmp_fit_CD_3$theta_hat
x = x_data_list[[1]]
x_data = x_data_generates(x) ## rank form -> inx form
lmm_fit = lmm(data = x) ## sigma0, phi estimates
sim_sigma0 = lmm_fit$mode
sim_phi = exp(-lmm_fit$theta)
n_items = ncol(x)
n_items_comb = n_items * (n_items - 1) / 2
theta_vec_0 = rep(lmm_fit$theta, n_items_comb)
A_mat = A_mat_fun(n_items = n_items) ## design matrix
sim_sigma0_inx = combn(sim_sigma0, 2) %>% apply(., 2, function(x) paste(sort(x), collapse = ''))
ordered_inx = combn(1:n_items, 2) %>% apply(., 2, function(x) paste(sort(x), collapse = ''))
change_inx = match(ordered_inx, sim_sigma0_inx)
sign_inx = ifelse(x_data_generates(data = matrix(sim_sigma0, nrow = 1)) == matrix(1, ncol = n_items_comb, nrow = 1),
1, -1) %>% as.numeric()
change_mat = diag(length(change_inx))[change_inx, ] * sign_inx
x_ordered = apply(x, 1, function(i) sim_sigma0[i]) %>% t()
x_data_ordered = x_data_generates(x_ordered)
theta_update_fixed_term = -colMeans(x_data_ordered)
sim_phi = exp(-lmm_fit$theta)
#### Optimization ####
H = matrix(0, nrow = n_items_comb - 1, ncol = n_items_comb)
H[row(H) == col(H)] = 1
H[row(H) + 1 == col(H)] = -1
HtH = t(H) %*% H
# set.seed(1)
theta_vec =  rnorm(n_items_comb)
D_mat = cbind(matrix(0, n_items_comb, n_items), diag(1, n_items_comb, n_items_comb))
D_theta_mat = rbind(diag(1, n_items_comb, n_items_comb), matrix(0, n_items, n_items_comb))
S_mat = D_mat %*% solve(A_mat) %*% D_theta_mat %*% change_mat
x_nrow = nrow(x_data_ordered)
transition_data = x_data_ordered
sim_rank_data = rim(n = x_nrow, sigma0 = 1:n_items, phi = sim_phi)
sim_rank_data
sim_rank_data = rim(n = 1, sigma0 = 1:n_items, phi = sim_phi) ## random sample generates
transition_data = x_data_ordered
sam_prob_vec = pmin(exp((x_sim_data - transition_data) %*% (theta_vec - theta_vec_0)), 1)
sim_rank_data = rim(n = x_nrow, sigma0 = 1:n_items, phi = sim_phi)
x_sim_data = x_data_generates(sim_rank_data)
sam_prob_vec = pmin(exp((x_sim_data - transition_data) %*% (theta_vec - theta_vec_0)), 1)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
binom_vec
binom_mat = matrix(binom_vec, nrow = x_nrow, ncol = n_items_comb)
binom_mat
sam_prob_vec
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = sam_prob_vec)
head(sam_prob_vec)
head(binom_vec)
sam_prob_vec
binom_vec = rbinom(n = x_nrow, size = 1, prob = as.numeric(sam_prob_vec))
binom_vec
binom_vec = rbinom(n = x_nrow, size = 1, prob = as.numeric(sam_prob_vec))
head(sam_prob_vec)
head(binom_vec)
binom_vec = rbinom(n = x_nrow, size = 1, prob = as.numeric(sam_prob_vec))
head(sam_prob_vec)
head(binom_vec)
binom_mat = matrix(binom_vec, nrow = x_nrow, ncol = n_items_comb)
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
setwd('ex2')
load('ex2_data_list_500.Rdata')
lambda_candidate = seq(0, 0.2, 0.05)
i = j = 1
system.time(tmp_fit <- cbs_fit(x = x_data_list[[1]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4))
system.time(tmp_fit_CD_1 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 1,
eps = 1e-4))
system.time(tmp_fit_CD_3 <- cbs_fit_CD(x = x_data_list[[1]],
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
transition_n = 3,
eps = 1e-4))
test_rank_data = permutations(5)
test_data = x_data_generates(data = test_rank_data)
A_mat = A_mat_fun(n_items = 5) ## design matrix
# ex 1
# gamma_star = c(0, -0.2, 0, 0, 0.2, 0, 0, 0, 0, 0)
# gamma_ratio = 1
# beta_star = c(0.7, 0.5, 0, -0.4, -0.8, gamma_star * gamma_ratio)
# ex 2
gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
gamma_ratio = 1
beta_star = c(-1, -0.8, 0.5, 0.7, 0.6, gamma_star * gamma_ratio)
# ex 5
# gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
# gamma_ratio = 5
# beta_star = c(0.1, 0.2, 0, -0.05, -0.25, gamma_star * gamma_ratio)
n_items_comb = 10
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
par(mfrow = c(2, 2))
y_max = max(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)),
exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)),
exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)),
# exp(test_data %*% tmp_fit_CD_5$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_5$theta_hat)),
# exp(test_data %*% tmp_fit_CD_10$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_10$theta_hat)),
exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)))
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), ylim = c(0, y_max), type = 's', main = 'True')
plot(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)), type = 's', ylim = c(0, y_max), main = 'Proposed')
plot(exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_1')
plot(exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_3')
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
y_max = max(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)),
exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)),
exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)),
# exp(test_data %*% tmp_fit_CD_5$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_5$theta_hat)),
# exp(test_data %*% tmp_fit_CD_10$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_10$theta_hat)),
exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)))
plot(exp(test_data %*% theta_star) / sum(exp(test_data %*% theta_star)), ylim = c(0, y_max), type = 's', main = 'True')
plot(exp(test_data %*% tmp_fit$theta_hat) / sum(exp(test_data %*% tmp_fit$theta_hat)), type = 's', ylim = c(0, y_max), main = 'Proposed')
plot(exp(test_data %*% tmp_fit_CD_1$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_1$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_1')
plot(exp(test_data %*% tmp_fit_CD_3$theta_hat) / sum(exp(test_data %*% tmp_fit_CD_3$theta_hat)), type = 's', ylim = c(0, y_max), main = 'CD_3')
par(mfrow = c(1, 1))
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code/ex2')
source('../model.R')
load('ex2_data_list_500.Rdata')
lambda_candidate = seq(0, 0.2, 0.05)
model_list = vector('list', length(x_data_list))
for(i in 1:100)
{
tmp_model_list = vector('list', 5)
for(j in 1:5)
{
tmp_model_list[[j]] = cbs_fit(x = x_data_list[[i]],
sim_n = 10,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4)
}
model_list[[i]] = tmp_model_list
cat(i, '\n')
}
save(model_list, file = 'ex2_500_n10.Rdata')
for(i in 1:100)
{
tmp_model_list = vector('list', 5)
for(j in 1:5)
{
tmp_model_list[[j]] = cbs_fit(x = x_data_list[[i]],
sim_n = 50,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4)
}
model_list[[i]] = tmp_model_list
cat(i, '\n')
}
save(model_list, file = 'ex2_500_n50.Rdata')
for(i in 1:100)
{
tmp_model_list = vector('list', 5)
for(j in 1:5)
{
tmp_model_list[[j]] = cbs_fit(x = x_data_list[[i]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = lambda_candidate[j],
lambda2 = 0,
eps = 1e-4)
}
model_list[[i]] = tmp_model_list
cat(i, '\n')
}
save(model_list, file = 'ex2_500_n100.Rdata')
