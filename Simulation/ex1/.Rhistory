devtools::install_github('Monster-Moon/l1pm')
devtools::install_github('Monster-Moon/l1pm', force = T)
require(l1pm)
l1pm::l1_p
require(l1pm)
l1_p
nnip
nnqp
require(tensorflow)
l1pm::l1_p
devtools::install_github('Monster-Moon/l1pm', force = T)
require(l1pm)
devtools::install_github('Monster-Moon/l1pm')
l1pm::l1_p
namespaceExport(l1pm)
require(l1pm)
require(l1pm)
require(tensorflow)
reticulate::use_condaenv(condaenv = 'r-reticulate')
require(tensorflow)
require(l1pm)
l1pm::l1_p
require(EnvStats)
require(MASS)
rnorm(n = 100)
x = rnorm(n = 100)
boxcox(x)
boxcox(x ~ 1)
require(MASS)
boxcox(x ~ 1)
x
exp(x) / (1 + exp(x))
plot(exp(x) / (1 + exp(x)))
exp(x)
boxcox(exp(x) ~ 1)
bc = boxcox(exp(x) ~ 1)
bc$x
bc$y
hist(bc$x0
hist(bc$x)
hist(bc$x)
hist(bc$y)
plot(bc)
bc
bc = boxcox(exp(x) ~ 1, lambda = seq(-5, 5, 0.1))
bc
bc$y == max(bc$y)
which(bc$y == max(bc$y))
bc$x[which(bc$y == max(bc$y))]
beta_lam = bc$x[which(bc$y == max(bc$y))]
x = runif(n = 100)
boxcox(x ~ 1)
bc = boxcox(exp(x) ~ 1, lambda = seq(-5, 5, 0.1))
beta_lam = bc$x[which(bc$y == max(bc$y))]
beta_lam
(x^beta_lam - 1) / beta_lam
hist((x^beta_lam - 1) / beta_lam)
hist((exp(x)^beta_lam - 1) / beta_lam)
exp(x)
(exp(x)^beta_lam - 1)
beta_lam
bc = boxcox(exp(x) ~ 1, lambda = seq(-5, 5, 0.01))
beta_lam = bc$x[which(bc$y == max(bc$y))]
beta_lam
hist((exp(x)^beta_lam - 1) / beta_lam)
exp(x)
hist(exp(x))
exp(x)^beta_lam - 1
(exp(x)^beta_lam - 1) / beta_lam
bc = boxcox(x ~ 1, lambda = seq(-5, 5, 0.01))
beta_lam = bc$x[which(bc$y == max(bc$y))]
beta_lam
(x^beta_lam - 1) / beta_lam
x_transformed = (x^beta_lam - 1) / beta_lam
hist(x_transformed)
beta_lam = bc$x[which.max(bc$y)]
beta_lam
x_transformed = (x^beta_lam - 1) / beta_lam
hist(x_transformed)
x = runif(n = 1000)
boxcox(x ~ 1)
bc = boxcox(x ~ 1, lambda = seq(-5, 5, 0.01))
beta_lam = bc$x[which.max(bc$y)]
beta_lam
x_transformed = (x^beta_lam - 1) / beta_lam
hist(x_transformed)
y = rf(500,30,30)
hist(y,breaks = 12)
result = boxcox(y~1, lambda = seq(-5,5,0.5))
mylambda = result$x[which.max(result$y)]
mylambda
y2 = (y^mylambda-1)/mylambda
hist(y2)
beta_lam
mylambda
hist(y,breaks = 12)
hist(x)
x = rnorm(n = 1000)
boxcox(x ~ 1)
bc = boxcox(x ~ 1, lambda = seq(-5, 5, 0.01))
bc = boxcox(exp(x) ~ 1, lambda = seq(-5, 5, 0.01))
bc
beta_lam = bc$x[which.max(bc$y)]
beta_lam
x_transformed = (exp(x)^beta_lam - 1) / beta_lam
hist(x_transformed)
beta_lam
x = rf(n = 1000)
x = rf(n = 1000, 1, 2)
hist(x)
x = rf(n = 1000, 1, 1)
hist(x)
max(x)
x = rf(n = 100, 1, 1)
x = rf(n = 100, 10, 10)
hist(x)
x1 = rf(n = 100, 10, 10)
x2 = rf(n = 100, 10, 10)
x3 = rf(n = 100, 10, 10)
x = x1 + x2 + x3
bc_x = boxcox(x ~ 1, lambda = seq(-5, 5, 0.01))
lam_x = bc_x$x[which.max(bc_x$y)]
lam_x
x_t = (x^lam_x - 1) / lam_x
hist(x_t)
bc_x1 = boxcox(x1 ~ 1, lambda = seq(-5, 5, 0.01))
lam_x1 = bc_x1$x[which.max(bc_x1$y)]
lam_x1
bc_x1 = boxcox(x1 ~ 1, lambda = seq(-5, 5, 0.01))
lam_x1 = bc_x1$x[which.max(bc_x1$y)]
lam_x1
x1_t = (x1^lam_x1 - 1) / lam_x1
bc_x2 = boxcox(x2 ~ 1, lambda = seq(-5, 5, 0.01))
lam_x2 = bc_x2$x[which.max(bc_x2$y)]
lam_x2
x2_t = (x2^lam_x2 - 1) / lam_x2
bc_x3 = boxcox(x3 ~ 1, lambda = seq(-5, 5, 0.01))
lam_x3 = bc_x3$x[which.max(bc_x3$y)]
lam_x3
x3_t = (x3^lam_x3 - 1) / lam_x3
x1_t
hist(x1_t)
lam_x1
lam_x2
lam_x3
lam_x
lam_x1 + lam_x2 + lam_x3
lm(x_t ~ x1_t + x2_t + x3_t)
fit_lm = lm(x_t ~ x1_t + x2_t + x3_t)
fit_lm$fitted.values
plot(x_t, fit_lm$fitted.values)
order(x_t)
order(fit_lm$fitted.values)
plot(order(x_t), order(fit_lm$fitted.values))
plot(x_t, fit_lm$fitted.values)
require(caret)
?caret::BoxCoxTrans()
fit_lm = lm(x_t ~ x1_t + x2_t + x3_t)
fit_lm = lm(x_t ~ x1_t + x2_t + x3_t)
plot(x_t, fit_lm$fitted.values)
which.max(x_t)
x_t[1:10]
fit_lm$fitted.values[1:10]
order(x_t, decreasing = T)[1:10]
order(fit_lm$fitted.values, decreasing = T)[1:10]
plot(x_t, fit_lm$fitted.values)
if(!require(httr)) install.packages('httr'); require(httr)
require(httr)
if(!require(rvest)) install.packages('rvest'); require(rvest)
rm(list = ls())
gc(reset = T)
if(!require(httr)) install.packages('httr'); require(httr)
if(!require(rvest)) install.packages('rvest'); require(rvest)
url = 'http://apis.data.go.kr/B460014/foodBankInfoService'
paste0(url, '/getUserInfo')
tmp_url = paste0(url, '/getUserInfo')
url_key = '%2FTx8UW5QkXse141bToOh9SO%2FbpFMoFAm4th151RoR4VW75y%2BGv3XzlqxeF80oGKEcWZ8pSoXvEi6%2BNnzlR%2FRrQ%3D%3D'
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
url_get = paste0(tmp_url,
'?serviceKey=', url_key,
'&stdrYm=', 201702,
'&numOfRows=', 2,
'&pageNo=', 1) %>% GET()
url_get
paste0(tmp_url,
'?serviceKey=', url_key,
'&stdrYm=', 201702,
'&numOfRows=', 2,
'&pageNo=', 1)
url_get = paste0(tmp_url,
'?serviceKey=', url_key,
'&stdrYm=', 201702,
'&numOfRows=', 2,
'&pageNo=', 1) %>% GET()
url_get
url_key = '/Tx8UW5QkXse141bToOh9SO/bpFMoFAm4th151RoR4VW75y+Gv3XzlqxeF80oGKEcWZ8pSoXvEi6+NnzlR/RrQ=='
url_get = paste0(tmp_url,
'?serviceKey=', url_key,
'&stdrYm=', 201702,
'&numOfRows=', 2,
'&pageNo=', 1) %>% GET()
url_get
read_html(url_get)
url_get %>% rvest::html()
url_get %>% xml2::read_html()
url_get = GET(url = 'http://www.naver.com')
url_get %>% xml2::read_html()
url_get %>% read_html()
url = 'http://apis.data.go.kr/B460014/foodBankInfoService'
url_key = '%2FTx8UW5QkXse141bToOh9SO%2FbpFMoFAm4th151RoR4VW75y%2BGv3XzlqxeF80oGKEcWZ8pSoXvEi6%2BNnzlR%2FRrQ%3D%3D'
tmp_url = paste0(url, '/getUserInfo')
url_get = paste0(tmp_url,
'?serviceKey=', url_key,
'&stdrYm=', 201702,
'&numOfRows=', 2,
'&pageNo=', 1) %>% GET()
url_get %>% read_html()
url_get$status_code
url_get$content
url_get$status_code == 200
4500000 * 50
450 * 50
80000 * 50
8 * 50
2 * 50
7000 * 56
?deriv
dx2x <- deriv(~ x^2, "x") ; dx2x
## Not run: expression({
.value <- x^2
## End(Not run)
mode(dx2x)
x <- -1:2
eval(dx2x)
## Something 'tougher':
trig.exp <- expression(sin(cos(x + y^2)))
( D.sc <- D(trig.exp, "x") )
all.equal(D(trig.exp[[1]], "x"), D.sc)
trig.exp
( D.sc <- D(trig.exp, "x") )
## function returned:
deriv((y ~ sin(cos(x) * y)), c("x","y"), func = TRUE)
( D.sc <- D(trig.exp, "x") )
?D
## Something 'tougher':
trig.exp <- expression(exp(a * x) / (exp(a * x) + exp(b * x)))
( D.sc <- D(trig.exp, "x") )
( D.sc <- D(trig.exp, "x") )
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
lambda_candidate = seq(0, 0.2, 0.05)
n_items = 3
n_items_comb = n_items * (n_items - 1) / 2
A_mat = A_mat_fun(n_items = n_items) ## design matrix
A_mat
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
lambda_candidate = seq(0, 0.2, 0.05)
n_items = 5
n_items_comb = n_items * (n_items - 1) / 2
A_mat = A_mat_fun(n_items = n_items) ## design matrix
test_rank_data = permutations(n_items)
test_data = x_data_generates(data = test_rank_data)
gamma_star = rep(0, n_items_comb)
gamma_ratio = 1
A_mat
# beta_vec = c(0.4703989, -0.3079531, 0.7379588, 1.1627673,
#               -1.8673873, -1.2596471,  0.7933543, 0.270508)
beta_star = c(0.7, 0.5, 0, -0.4, -0.8, gamma_star * gamma_ratio)
A_mat
tt = A_mat[1:(n_items_comb + 1), 1:n_items] %*% beta_star[1:n_items]
tt
aa = A_mat[1:(n_items_comb + 1), 1:n_items]
aa
MASS::ginv(aa) %*% c(rnorm(n_items), rep(0, 5), 0)
beta_star
tt = A_mat[1:(n_items_comb + 1), 1:n_items] %*% beta_star[1:n_items]
aa = A_mat[1:(n_items_comb + 1), 1:n_items]
MASS::ginv(aa) %*% c(rnorm(n_items), rep(0, 5), 0)
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
theta_star
MASS::ginv(aa) %*% c(theta_star, 0)
gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
gamma_ratio = 0
beta_star = c(0.7, 0.5, 0, -0.4, -0.8, gamma_star * gamma_ratio)
beta_star
gamma_ratio = 1
# beta_vec = c(0.4703989, -0.3079531, 0.7379588, 1.1627673,
#               -1.8673873, -1.2596471,  0.7933543, 0.270508)
beta_star = c(0.7, 0.5, 0, -0.4, -0.8, gamma_star * gamma_ratio)
rm(list = ls())
gc(reset = T)
setwd('D:\\Paper\\cbs_model\\code\\simulation_code\\ex3')
source('..\\model.R')
load('ex3_data_list_500.Rdata')
setwd('D:\\Paper\\cbs_model\\code\\simulation_code\\ex3')
setwd('/Users/moon/Documents/CBS_model/code/simulation_code/ex3')
load('ex3_data_list_500.Rdata')
load('ex3_500_n100.Rdata')
model_list[[1]]
model_list[[1]][[1]]
model_list[[1]][[1]]$beta_hat
# beta_vec = c(0.4703989, -0.3079531, 0.7379588, 1.1627673,
#               -1.8673873, -1.2596471,  0.7933543, 0.270508)
beta_star = c(0.7, 0.5, 0, -0.4, -0.8, gamma_star * gamma_ratio)
gamma_star = rep(0, n_items_comb)
gamma_ratio = 1
# beta_vec = c(0.4703989, -0.3079531, 0.7379588, 1.1627673,
#               -1.8673873, -1.2596471,  0.7933543, 0.270508)
beta_star = c(0.7, 0.5, 0, -0.4, -0.8, gamma_star * gamma_ratio)
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code')
source('model.R')
lambda_candidate = seq(0, 0.2, 0.05)
n_items = 5
n_items_comb = n_items * (n_items - 1) / 2
A_mat = A_mat_fun(n_items = n_items) ## design matrix
test_rank_data = permutations(n_items)
test_data = x_data_generates(data = test_rank_data)
gamma_star = c(0, -0.1, 0.05, -0.05, 0.1, 0.05, 0.05, -0.1, -0.1, 0.1)
gamma_ratio = 1
beta_star = c(0.7, 0.5, 0, -0.4, -0.8, gamma_star * gamma_ratio)
beta_star
A_mat
tt = A_mat[1:(n_items_comb + 1), 1:n_items] %*% beta_star[1:n_items]
aa = A_mat[1:(n_items_comb + 1), 1:n_items]
MASS::ginv(aa) %*% c(rnorm(n_items), rep(0, 5), 0)
MASS::ginv(aa) %*% c(theta_star, 0)
theta_star = A_mat %*% beta_star
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
theta_star = A_mat %*% beta_star
theta_star = theta_star[1:n_items_comb]
A_mat
tt = A_mat[1:(n_items_comb + 1), 1:n_items] %*% beta_star[1:n_items]
aa = A_mat[1:(n_items_comb + 1), 1:n_items]
MASS::ginv(aa) %*% c(rnorm(n_items), rep(0, 5), 0)
MASS::ginv(aa) %*% c(theta_star, 0)
beta_star
theta_vec
theta_vec =  rnorm(n_items_comb)
theta_vec
c(theta_vec, rep(0, n_items))
solve(A_mat) %*% c(theta_vec, rep(0, n_items))
beta_vec
beta_vec = solve(A_mat) %*% c(theta_vec, rep(0, n_items))
beta_vec
beta_vec = A_solve_mat %*% c(theta_vec, rep(0, n_items))
beta_vec
A_solve_mat = solve(A_mat)
beta_vec = A_solve_mat %*% c(theta_vec, rep(0, n_items))
beta_vec
beta_vec[(n_items+1):length(beta_vec)]
beta_vec[(n_items+1):length(beta_vec)] = 0
beta_vec
A_mat %*% beta_vec
theta_vec = (A_mat %*% beta_vec)[1:n_items_comb]
theta_vec
beta_hat = solve(A_mat) %*% c(theta_hat_return, rep(0, n_items))
theta_vec =  rnorm(n_items_comb)
beta_vec = A_solve_mat %*% c(theta_vec, rep(0, n_items))
beta_vec[(n_items+1):length(beta_vec)] = 0
theta_vec
(A_mat %*% beta_vec)[1:n_items_comb]
rm(list = ls())
gc(reset = T)
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code/ex1')
source('../model.R')
load('ex1_data_list_500.Rdata')
lambda_candidate = seq(0, 0.2, 0.05)
model_list = vector('list', length(x_data_list))
#### BTM
model_list = vector('list', length(x_data_list))
tmp_model_list = vector('list', 5)
model_list[[i]] = btm_fit(x = x_data_list[[i]],
sim_n = 10,
eta = 0.05,
max_iter = 1000,
lambda1 = 0,
lambda2 = 0,
eps = 1e-4)
i = 1
model_list[[i]] = btm_fit(x = x_data_list[[i]],
sim_n = 10,
eta = 0.05,
max_iter = 1000,
lambda1 = 0,
lambda2 = 0,
eps = 1e-4)
model_list[[1]]
model_list[[1]]$beta_hat
beta_star
#### BTM
model_list = vector('list', length(x_data_list))
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code/ex1')
source('../model.R')
load('ex1_data_list_500.Rdata')
source('~/Documents/CBS_model/code/simulation_code/ex1/ex1_exec_500.R', echo=TRUE)
rm(list = ls())
gc(reset = T)
setwd('/Users/moon/Documents/CBS_model/code/simulation_code/ex1')
source('../model.R')
load('ex1_data_list_500.Rdata')
model_list = vector('list', length(x_data_list))
for(i in 1:100)
{
model_list[[i]] = btm_fit(x = x_data_list[[i]],
sim_n = 10,
eta = 0.05,
max_iter = 1000,
lambda1 = 0,
lambda2 = 0,
eps = 1e-4)
cat(i, '\n')
}
save(model_list, file = 'ex1_btm_n10.Rdata')
for(i in 1:100)
{
model_list[[i]] = btm_fit(x = x_data_list[[i]],
sim_n = 50,
eta = 0.05,
max_iter = 1000,
lambda1 = 0,
lambda2 = 0,
eps = 1e-4)
cat(i, '\n')
}
save(model_list, file = 'ex1_btm_n50.Rdata')
for(i in 1:100)
{
model_list[[i]] = btm_fit(x = x_data_list[[i]],
sim_n = 100,
eta = 0.05,
max_iter = 1000,
lambda1 = 0,
lambda2 = 0,
eps = 1e-4)
cat(i, '\n')
}
save(model_list, file = 'ex1_btm_n100.Rdata')
